#!/bin/bash

# Universal Linux user_data template (Ubuntu/Debian + Rocky/Alma/RHEL)
# ROOT_USER is always "root" and ROOT_HOME is always "/root" (variables removed).

# -----------------------------
# OS detection helpers
# -----------------------------
if [ -r /etc/os-release ]; then
  . /etc/os-release
fi

OS_ID="$${ID:-unknown}"
OS_LIKE="$${ID_LIKE:-}"
have_cmd() { command -v "$1" >/dev/null 2>&1; }
try() { "$@" || true; }  # best-effort for cross-distro commands

is_debian_like=0
is_rhel_like=0
if echo "$OS_ID $OS_LIKE" | grep -Ei 'debian|ubuntu' >/dev/null 2>&1; then
  is_debian_like=1
fi
if echo "$OS_ID $OS_LIKE" | grep -Ei 'rhel|fedora|centos|rocky|almalinux' >/dev/null 2>&1; then
  is_rhel_like=1
fi

# -----------------------------
# Base package management
# -----------------------------
if have_cmd apt-get; then
  export DEBIAN_FRONTEND=noninteractive
  sudo apt-get -y update
  sudo apt-get -y upgrade
  sudo apt-get install -y python3-pip git bc nfs-common screen net-tools fio xfsprogs
elif have_cmd dnf; then
  try sudo dnf -y install epel-release
  sudo dnf -y upgrade
  sudo dnf install -y python3-pip git bc nfs-utils screen net-tools fio xfsprogs
elif have_cmd yum; then
  try sudo yum -y install epel-release
  sudo yum -y update
  sudo yum install -y python3-pip git bc nfs-utils screen net-tools fio xfsprogs
fi

# Optional: Docker + editor (Debian/Ubuntu only)
if [ "$is_debian_like" -eq 1 ] && have_cmd apt-get; then
  sudo apt-get update -y
  sudo apt-get install -y curl apt-transport-https ca-certificates software-properties-common gnupg lsb-release
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
    | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
  sudo apt-get update -y
  sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  sudo DEBIAN_FRONTEND=noninteractive apt-get install -y emacs
fi

# ----------------------------------------------------------------------------
# WARNING!!
# DO NOT MODIFY ANYTHING BELOW THIS LINE OR INSTANCES MAY NOT START CORRECTLY!
# ----------------------------------------------------------------------------

TARGET_USER='${TARGET_USER}'
TARGET_HOME='${TARGET_HOME}'
SSH_KEYS='${SSH_KEYS}'
ALLOW_ROOT='${ALLOW_ROOT}'
TIER0='${TIER0}'
TIER0_TYPE='${TIER0_TYPE}'

# -----------------------------
# SSH client/server hardening tweaks (keep hostkey non-interactive)
# -----------------------------
sudo tee -a /etc/ssh/ssh_config > /dev/null <<'EOF'
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF

sudo tee -a /etc/ssh/sshd_config > /dev/null <<'EOF'
    PermitRootLogin yes
    PubkeyAuthentication yes
EOF

try sudo systemctl restart ssh
try sudo systemctl restart sshd

# -----------------------------
# SSH Key management for target user
# -----------------------------
if [ -n "$${SSH_KEYS}" ]; then
    mkdir -p "$${TARGET_HOME}/.ssh"
    chmod 700 "$${TARGET_HOME}/.ssh"
    touch "$${TARGET_HOME}/.ssh/authorized_keys"

    echo "$${SSH_KEYS}" | while read -r key; do
        if [ -n "$${key}" ] && ! grep -qF "$${key}" "$${TARGET_HOME}/.ssh/authorized_keys"; then
            echo "$${key}" >> "$${TARGET_HOME}/.ssh/authorized_keys"
        fi
    done

    chmod 600 "$${TARGET_HOME}/.ssh/authorized_keys"
    chown -R "$${TARGET_USER}":"$${TARGET_USER}" "$${TARGET_HOME}/.ssh"
fi

# -----------------------------
# OPTIONAL: SSH Key management for root (if allowed)
# -----------------------------
if [ -n "$${SSH_KEYS}" ] && [ "$${ALLOW_ROOT}" = "true" ]; then
    echo "Starting SSH Key Management Deployment for root"

    if [ ! -d "/root/.ssh" ]; then
      mkdir -p "/root/.ssh"
      chmod 700 "/root/.ssh"
      touch "/root/.ssh/authorized_keys"
    fi

    echo "$${SSH_KEYS}" | while read -r key; do
        if [ -n "$${key}" ] && ! grep -qF "$${key}" "/root/.ssh/authorized_keys"; then
            echo "$${key}" >> "/root/.ssh/authorized_keys"
        fi
    done

    chmod 600 "/root/.ssh/authorized_keys"
    chown -R root:root "/root/.ssh"
    echo "Ending SSH Key Management Deployment for root"
fi

# -----------------------------
# Build an NFS test mountpoint (client side)
# -----------------------------
sudo mkdir -p /mnt/nfs-test
sudo chmod 777 /mnt/nfs-test

# -----------------------------
# Tier0: NVMe RAID + NFS export on /tier0 (if enabled)
# -----------------------------
tier0_setup() {
  echo "Tier0 is enabled. Installing RAID/NVMe/NFS packages and detecting NVMe…"

  if have_cmd apt; then
    sudo apt -y update
    sudo apt -y install mdadm nvme-cli jq nfs-kernel-server sysstat xfsprogs
  elif have_cmd apt-get; then
    sudo apt-get -y update
    sudo apt-get -y install mdadm nvme-cli jq nfs-kernel-server sysstat xfsprogs
  elif have_cmd dnf; then
    sudo dnf -y install mdadm nvme-cli jq nfs-utils sysstat xfsprogs
  elif have_cmd yum; then
    sudo yum -y install mdadm nvme-cli jq nfs-utils sysstat xfsprogs
  fi

  # Detect AWS instance-store NVMe devices
  mapfile -t NVME_DEVICES < <(nvme list | awk '/Amazon EC2 NVMe Instance Storage/ {print $1}')
  echo "Found $${#NVME_DEVICES[@]} NVMe device(s): $${NVME_DEVICES[*]}"

  if [ "$${#NVME_DEVICES[@]}" -eq 0 ]; then
      echo "No NVMe instance-store devices found; skipping RAID creation."
      return 0
  fi

  TOTAL_DEVICES="$${#NVME_DEVICES[@]}"

  case "$${TIER0_TYPE}" in
    raid-0)
      MIN_REQUIRED=2
      raid_options="--level=0 --raid-devices=$${TOTAL_DEVICES}"
      ;;
    raid-5)
      MIN_REQUIRED=3
      raid_options="--level=5 --raid-devices=$${TOTAL_DEVICES}"
      ;;
    raid-6)
      MIN_REQUIRED=4
      raid_options="--level=6 --raid-devices=$${TOTAL_DEVICES}"
      ;;
    *)
      echo "Error: Invalid TIER0 value $${TIER0_TYPE}." >&2
      return 1
      ;;
  esac

  if [ "$${TOTAL_DEVICES}" -lt "$${MIN_REQUIRED}" ]; then
      echo "Error: Insufficient devices ($${TOTAL_DEVICES}) for $${TIER0_TYPE} (needs ≥ $${MIN_REQUIRED}). Skipping."
      return 1
  fi

  RAID_NUM="$${TIER0_TYPE#raid-}"
  echo "Creating RAID$${RAID_NUM} on $${TOTAL_DEVICES} devices…"
  sudo mdadm --create --verbose /dev/md0 $${raid_options} $${NVME_DEVICES[*]}

  sudo mkfs.xfs -f /dev/md0
  sudo mkdir -p /tier0
  sudo mount /dev/md0 /tier0
  sudo chown -R "$${TARGET_USER}":"$${TARGET_USER}" /tier0
  sudo chmod 777 /tier0

  if [ -d /etc/mdadm ]; then
    sudo mdadm --detail --scan | sudo tee -a /etc/mdadm/mdadm.conf
  else
    sudo mdadm --detail --scan | sudo tee -a /etc/mdadm.conf
  fi

  echo "/dev/md0 /tier0 xfs defaults,nofail 0 2" | sudo tee -a /etc/fstab

  if have_cmd update-initramfs; then
    sudo update-initramfs -u
  elif have_cmd dracut; then
    sudo dracut -f
  fi

  echo "/tier0 *(rw,sync,no_root_squash,secure,mp,no_subtree_check)" | sudo tee -a /etc/exports

  if [ -d /etc/nfs.conf.d ]; then
    sudo tee /etc/nfs.conf.d/local.conf > /dev/null <<'EOF'
[nfsd]
threads = 128
vers3=y
vers4.0=n
vers4.1=n
vers4.2=y
rdma=y
rdma-port=20049

[mountd]
manage-gids = 1
EOF
  else
    sudo tee -a /etc/nfs.conf > /dev/null <<'EOF'

[nfsd]
threads = 128
vers3=y
vers4.0=n
vers4.1=n
vers4.2=y
rdma=y
rdma-port=20049

[mountd]
manage-gids = 1
EOF
  fi

  if [ -f /etc/default/nfs-kernel-server ]; then
    sudo tee /etc/default/nfs-kernel-server > /dev/null <<'EOF'
RPCNFSDCOUNT=128
RPCMOUNTDOPTS="--manage-gids"
EOF
  elif [ -f /etc/sysconfig/nfs ]; then
    if ! grep -q '^RPCNFSDCOUNT=' /etc/sysconfig/nfs 2>/dev/null; then
      echo 'RPCNFSDCOUNT=128' | sudo tee -a /etc/sysconfig/nfs >/dev/null
    fi
  fi

  try sudo systemctl enable --now nfs-kernel-server
  try sudo systemctl restart nfs-kernel-server
  try sudo systemctl enable --now nfs-server
  try sudo systemctl restart nfs-server
}

if [ "$${TIER0}" = "true" ]; then
  tier0_setup
else
  echo "Tier0 is not enabled on this machine"
fi

if have_cmd docker && id "$${TARGET_USER}" >/dev/null 2>&1 && [ "$${TARGET_USER}" != "root" ]; then
  try sudo usermod -aG docker "$${TARGET_USER}"
fi

sudo reboot
