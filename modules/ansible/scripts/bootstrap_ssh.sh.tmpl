#!/bin/bash
# Universal Ansible bootstrap (Ubuntu/Debian + Rocky/Alma/RHEL)
# - Bring SSM Agent up ASAP (repo → snap → regional S3 fallback)
# - Install Ansible + boto libs + collections for AWS/SSM
# - Install SSM Session Manager Plugin
# - Manage SSH keys for TARGET_USER and root (/root)
# - Relax SSH host key prompts

set -euo pipefail

# -----------------------------
# OS detection helpers
# -----------------------------
if [ -r /etc/os-release ]; then
  . /etc/os-release
fi

# Helpers
have_cmd() { command -v "$1" >/dev/null 2>&1; }
try() { "$@" || true; }

echo "Starting bootstrap process..."

# -----------------------------
# Minimal deps so SSM fallback (curl) can work
# -----------------------------
if have_cmd apt-get; then
  sudo apt-get -y update
  sudo apt-get install -y curl ca-certificates jq unzip
elif have_cmd dnf; then
  try sudo dnf -y upgrade
  sudo dnf install -y curl ca-certificates jq unzip
elif have_cmd yum; then
  try sudo yum -y update
  sudo yum -y install curl ca-certificates jq unzip
fi

# -----------------------------
# SSM Agent install/enable (run as early as possible)
# -----------------------------
get_imds_token() {
  curl -sS -X PUT "http://169.254.169.254/latest/api/token" \
    -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"
}

imds_get() {
  local path="$1"
  local token
  token=$(get_imds_token)
  if [ -n "$token" ]; then
    curl -sS -H "X-aws-ec2-metadata-token: $token" "http://169.254.169.254/$path"
  else
    curl -sS "http://169.254.169.254/$path"
  fi
}

# Install AWS CLI v2 (needed to fetch secret)
if ! have_cmd aws; then
    echo "[bootstrap] Installing AWS CLI..."
    ARCH="$(uname -m)"
    if [ "$ARCH" = "x86_64" ]; then
        CLIZIP="awscli-exe-linux-x86_64.zip"
    elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then
        CLIZIP="awscli-exe-linux-aarch64.zip"
    else
        echo "[bootstrap] ERROR: Unsupported architecture: $ARCH"
        exit 1
    fi
    curl -fsSL "https://awscli.amazonaws.com/$CLIZIP" -o "/tmp/awscliv2.zip" > /tmp/curl_status.log 2>&1 || {
        STATUS=$(cat /tmp/curl_status.log)
        echo "[bootstrap] ERROR: Failed to download AWS CLI from https://awscli.amazonaws.com/$CLIZIP (HTTP $STATUS)"
        exit 1
    }
    unzip -q /tmp/awscliv2.zip -d /tmp/awscli || {
        echo "[bootstrap] ERROR: Failed to unzip /tmp/awscliv2.zip"
        exit 1
    }
    sudo /tmp/awscli/aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update || {
        echo "[bootstrap] ERROR: Failed to install AWS CLI"
        exit 1
    }
    if ! have_cmd aws; then
        echo "[bootstrap] ERROR: AWS CLI installation failed, command not found"
        exit 1
    fi
    echo "[bootstrap] AWS CLI installed: $(aws --version)"
fi

# Ensure SSM agent running (controller only)
ensure_ssm_agent() {
  if systemctl list-unit-files | grep -q '^amazon-ssm-agent\.service'; then
    try sudo systemctl enable --now amazon-ssm-agent
    return 0
  fi

  REGION="$(imds_get latest/dynamic/instance-identity/document | awk -F\" '/region/ {print $4}')"
  ARCH="$(uname -m)"
  if [ "$ARCH" = "x86_64" ]; then DEB_ARCH="amd64"; RPM_ARCH="linux_amd64";
  elif [ "$ARCH" = "aarch64" ] || [ "$ARCH" = "arm64" ]; then DEB_ARCH="arm64"; RPM_ARCH="linux_arm64";
  else DEB_ARCH="amd64"; RPM_ARCH="linux_amd64"; fi

  if have_cmd apt-get; then
    PKG="/tmp/amazon-ssm-agent.deb"
    URL="https://s3.$REGION.amazonaws.com/amazon-ssm-$REGION/latest/debian_$DEB_ARCH/amazon-ssm-agent.deb"
    if curl -fsSL "$URL" -o "$PKG"; then
      try sudo dpkg -i "$PKG" || try sudo apt-get -y -f install
      try sudo systemctl enable --now amazon-ssm-agent
      return 0
    fi
  else
    PKG="/tmp/amazon-ssm-agent.rpm"
    URL="https://s3.$REGION.amazonaws.com/amazon-ssm-$REGION/latest/$RPM_ARCH/amazon-ssm-agent.rpm"
    if curl -fsSL "$URL" -o "$PKG"; then
      if have_cmd dnf; then try sudo dnf -y install "$PKG"; else try sudo yum -y install "$PKG"; fi
      try sudo systemctl enable --now amazon-ssm-agent
      return 0
    fi
  fi
  echo "WARN: Failed to install amazon-ssm-agent via all methods."
}

# Base packages + Ansible
if have_cmd apt-get; then
  try sudo apt-get install -y python3 python3-pip git ansible net-tools
  try sudo DEBIAN_FRONTEND=noninteractive apt-get install -y emacs
elif have_cmd dnf; then
  try sudo dnf -y install epel-release
  try sudo dnf -y install python3 python3-pip git ansible-core net-tools || try sudo dnf -y install ansible
elif have_cmd yum; then
  try sudo yum -y install epel-release
  try sudo yum -y install python3 python3-pip git ansible
fi

try python3 -m pip install --upgrade pip boto3 botocore
if have_cmd ansible-galaxy; then
    echo "Installing specific versions of Ansible AWS collections to ensure stability..."
    try ansible-galaxy collection install amazon.aws
    try ansible-galaxy collection install community.aws
fi

echo "Ensuring SSM agent is installed and running..."
ensure_ssm_agent
echo "[bootstrap] SSM ready"

# TERRAFORM VARS
TARGET_USER='${TARGET_USER}'
TARGET_HOME='${TARGET_HOME}'
SSH_KEYS='${SSH_KEYS}'
PRIVATE_KEY_SECRET_ARN='${PRIVATE_KEY_SECRET_ARN}'
REGION_IN='${REGION}'

# SSH: fetch private key (Secrets Manager) & set up files
sudo mkdir -p /etc/ansible/keys
sudo chmod 700 /etc/ansible/keys

if [ -n "$PRIVATE_KEY_SECRET_ARN" ] && [ "$PRIVATE_KEY_SECRET_ARN" != "null" ]; then
    echo "[bootstrap] Fetching private key from Secrets Manager..."
    aws --region "$${REGION_IN}" secretsmanager get-secret-value \
        --secret-id "$${PRIVATE_KEY_SECRET_ARN}" \
        --query SecretString --output text > /tmp/ansible.key 2> /tmp/awscli_error.log || {
        echo "[bootstrap] ERROR: Failed to fetch private key from Secrets Manager: $(cat /tmp/awscli_error.log)"
        exit 1
    }
    sudo install -m 600 -o root -g root /tmp/ansible.key /etc/ansible/keys/ansible
    shred -u /tmp/ansible.key || true
fi

# Add provided public keys to controller user for admin access
if [ -n "$SSH_KEYS" ] && [ "$SSH_KEYS" != "null" ]; then
    sudo mkdir -p "${TARGET_HOME}/.ssh"
    echo "$${SSH_KEYS}" | sudo tee -a "${TARGET_HOME}/.ssh/authorized_keys" >/dev/null
    sudo chown -R "${TARGET_USER}:${TARGET_USER}" "${TARGET_HOME}/.ssh"
    sudo chmod 700 "${TARGET_HOME}/.ssh"
    sudo chmod 600 "${TARGET_HOME}/.ssh/authorized_keys"
fi

# Configure SSH settings for ubuntu user
sudo mkdir -p "${TARGET_HOME}/.ssh"
sudo tee "${TARGET_HOME}/.ssh/config" > /dev/null <<'EOF'
Host *
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF
sudo chown "${TARGET_USER}:${TARGET_USER}" "${TARGET_HOME}/.ssh/config"
sudo chmod 600 "${TARGET_HOME}/.ssh/config"

# Configure SSH settings system-wide
echo "Configuring SSH settings and authorized keys..."
sudo tee -a /etc/ssh/ssh_config > /dev/null <<'EOF'
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF

try sudo systemctl restart ssh || try sudo systemctl restart sshd

echo "Bootstrap process complete."
